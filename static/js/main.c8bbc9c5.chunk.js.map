{"version":3,"sources":["redux/actions/index.js","pages/Login.js","components/Header.js","components/WalletForm.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["fetchAPI","dispatch","fetch","response","json","data","type","payload","Login","doLogin","bind","handleInput","verifyInputs","state","email","password","disabled","target","this","setState","name","value","includes","length","props","history","setEmail","localStorage","setItem","push","className","placeholder","data-testid","onChange","onClick","React","Component","connect","saveEmail","Header","totalCost","currency","Math","abs","Number","toFixed","food","credit","debit","WalletForm","handleChange","addExpense","editExpense","description","method","tag","setExpense","expenseIndex","exchangeRates","getCurrencies","id","parentElement","firstChild","nextSibling","currentExpense","stopEdit","currencies","map","key","selected","event","editing","renderEditForm","renderNormalFormal","wallet","editor","expense","saveExpenseInfo","Table","edit","ask","deleteExpense","expenses","scope","sort","a","b","coinInfo","Object","values","find","object","code","renderEditButton","renderDeleteButton","removeExpense","Wallet","displayEmail","getItem","user","App","path","exact","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","keys","filter","currenciesInfo","cur","exp","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8bbc9c5.chunk.js","sourcesContent":["export const saveEmail = (email) => ({ type: 'SAVE_EMAIL', email });\n\nexport const getCurrencies = (payload) => ({ type: 'GET_CURRENCIES', payload });\n\nexport function fetchAPI() {\n  return async (dispatch) => {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    dispatch(getCurrencies(data));\n  };\n}\n\nexport const saveExpenseInfo = (expense) => ({ type: 'SAVE_EXPENSE', expense });\n\nexport const removeExpense = (expense, ask) => ({ type: 'REMOVE_EXPENSE', expense, ask });\n\nexport const editExpense = (expense, ask) => ({ type: 'SET_EDIT_EXPENSE', expense, ask });\n\nexport const finishEdit = () => ({ type: 'FINISH_EDIT' });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveEmail } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.doLogin = this.doLogin.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.verifyInputs = this.verifyInputs.bind(this);\n\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n  }\n\n  handleInput({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    }, () => this.verifyInputs());\n  }\n\n  verifyInputs() {\n    const { email, password } = this.state;\n    const minLength = 6;\n    if (email.includes('@') && email.includes('.com') && password.length >= minLength) {\n      this.setState({ disabled: false });\n    } else this.setState({ disabled: true });\n  }\n\n  doLogin() {\n    const { history, setEmail } = this.props;\n    const { email } = this.state;\n    setEmail(email);\n    localStorage.setItem('email', email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { disabled } = this.state;\n    return (\n      <div className=\"login-container\">\n        <input\n          className=\"form-control\"\n          placeholder=\"Email\"\n          name=\"email\"\n          data-testid=\"email-input\"\n          onChange={ this.handleInput }\n        />\n        <input\n          className=\"form-control\"\n          placeholder=\"Password\"\n          name=\"password\"\n          data-testid=\"password-input\"\n          onChange={ this.handleInput }\n        />\n        <button\n          className=\"btn btn-dark\"\n          type=\"button\"\n          onClick={ this.doLogin }\n          disabled={ disabled }\n        >\n          Entrar\n        </button>\n      </div>);\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    action: PropTypes.string,\n    block: PropTypes.func,\n    createHref: PropTypes.func,\n    go: PropTypes.func,\n    goBack: PropTypes.func,\n    goForward: PropTypes.func,\n    length: PropTypes.number,\n    listen: PropTypes.func,\n    location: PropTypes.objectOf(PropTypes.string),\n    push: PropTypes.func,\n    replace: PropTypes.func,\n  }).isRequired,\n  setEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setEmail: (email) => dispatch(saveEmail(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Header extends Component {\n  render() {\n    const { email, totalCost, currency } = this.props;\n    return (\n      <div className=\"header-container\">\n        <p data-testid=\"email-field\">\n          Seu email:\n          {' '}\n          <span>{email}</span>\n        </p>\n        <p data-testid=\"total-field\">\n          Custo total:\n          {' '}\n          <span>{Math.abs(Number(totalCost)).toFixed(2)}</span>\n        </p>\n        <p data-testid=\"header-currency-field\">\n          Moeda:\n          {' '}\n          <span>{currency}</span>\n        </p>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  totalCost: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveExpenseInfo, fetchAPI, finishEdit } from '../redux/actions';\n\nconst food = 'Alimentação';\nconst credit = 'Cartão de crédito';\nconst debit = 'Cartão de débito';\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addExpense = this.addExpense.bind(this);\n    this.editExpense = this.editExpense.bind(this);\n\n    this.state = {\n      value: '0',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: food,\n    };\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  addExpense({ target }) {\n    const { value, description, currency, method, tag } = this.state;\n    const { setExpense, expenseIndex, exchangeRates, getCurrencies } = this.props;\n    getCurrencies();\n    setExpense({\n      id: expenseIndex,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    });\n    target.parentElement.firstChild.value = '';\n    target.parentElement.firstChild.nextSibling.value = '';\n  }\n\n  editExpense(currentExpense, { target }) {\n    const { value, description, currency, method, tag } = this.state;\n    const { setExpense, stopEdit } = this.props;\n    setExpense({\n      id: currentExpense.id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: currentExpense.exchangeRates,\n    });\n    stopEdit();\n    target.parentElement.firstChild.value = '';\n    target.parentElement.firstChild.nextSibling.value = '';\n  }\n\n  renderNormalFormal(currencies) {\n    return (\n      <div className=\"wallet-form\">\n        <input\n          className=\"form-control\"\n          name=\"value\"\n          onChange={ this.handleChange }\n        />\n        <input\n          className=\"form-control\"\n          name=\"description\"\n          onChange={ this.handleChange }\n        />\n        <select\n          className=\"form-select\"\n          name=\"currency\"\n          onChange={ this.handleChange }\n        >\n          {currencies.map((currency) => (\n            <option key={ currency } value={ currency }>{currency}</option>\n          ))}\n        </select>\n        <select\n          className=\"form-select\"\n          name=\"method\"\n          onChange={ this.handleChange }\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value={ credit }>{credit}</option>\n          <option value={ debit }>{debit}</option>\n        </select>\n        <select\n          className=\"form-select\"\n          name=\"tag\"\n          onChange={ this.handleChange }\n        >\n          <option value={ food }>{food}</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n        <button\n          className=\"btn btn-dark\"\n          type=\"button\"\n          onClick={ this.addExpense }\n        >\n          Adicionar despesa\n\n        </button>\n      </div>\n    );\n  }\n\n  renderEditForm(currencies, currentExpense) {\n    return (\n      <div className=\"wallet-form\">\n        <input\n          className=\"form-control\"\n          name=\"value\"\n          onChange={ this.handleChange }\n          placeholder={ currentExpense.value }\n        />\n        <input\n          className=\"form-control\"\n          name=\"description\"\n          onChange={ this.handleChange }\n          placeholder={ currentExpense.description }\n        />\n        <select className=\"form-select\" name=\"currency\" onChange={ this.handleChange }>\n          {currencies.map((currency) => (\n            <option\n              selected={ currency === currentExpense.currency }\n              key={ currency }\n              value={ currency }\n            >\n              {currency}\n            </option>\n          ))}\n        </select>\n        <select className=\"form-select\" name=\"method\" onChange={ this.handleChange }>\n          <option selected={ currentExpense.method === 'Dinheiro\"' } value=\"Dinheiro\">\n            Dinheiro\n          </option>\n          <option selected={ currentExpense.method === credit } value={ credit }>\n            {credit}\n          </option>\n          <option selected={ currentExpense.method === debit } value={ debit }>\n            {debit}\n          </option>\n        </select>\n        <select className=\"form-select\" name=\"tag\" onChange={ this.handleChange }>\n          <option selected={ currentExpense.tag === food } value={ food }>{food}</option>\n          <option selected={ currentExpense.tag === 'Lazer' } value=\"Lazer\">Lazer</option>\n          <option selected={ currentExpense.tag === 'Trabalho' } value=\"Trabalho\">\n            Trabalho\n          </option>\n          <option selected={ currentExpense.tag === 'Transporte' } value=\"Transporte\">\n            Transporte\n          </option>\n          <option selected={ currentExpense.tag === 'Saúde' } value=\"Saúde\">Saúde</option>\n        </select>\n        <button\n          className=\"btn btn-dark\"\n          type=\"button\"\n          onClick={ (event) => this.editExpense(currentExpense, event) }\n        >\n          Editar despesa\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const { currencies, currentExpense, editing } = this.props;\n    return (\n      <div>\n        {editing ? this.renderEditForm(currencies, currentExpense)\n          : this.renderNormalFormal(currencies) }\n      </div>);\n  }\n}\n\nWalletForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n  setExpense: PropTypes.func.isRequired,\n  expenseIndex: PropTypes.number.isRequired,\n  exchangeRates: PropTypes.objectOf(PropTypes.object).isRequired,\n  currentExpense: PropTypes.shape({\n    id: PropTypes.number,\n    value: PropTypes.string,\n    description: PropTypes.string,\n    currency: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    exchangeRates: PropTypes.objectOf(PropTypes.object),\n  }).isRequired,\n  editing: PropTypes.bool.isRequired,\n  stopEdit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  expenseIndex: state.wallet.expenseIndex,\n  exchangeRates: state.wallet.exchangeRates,\n  currentExpense: state.wallet.currentExpense,\n  editing: state.wallet.editor,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setExpense: (expense) => dispatch(saveExpenseInfo(expense)),\n  getCurrencies: () => dispatch(fetchAPI()),\n  stopEdit: () => dispatch(finishEdit()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editExpense, removeExpense } from '../redux/actions';\n\nconst minusOne = -1;\n\nclass Table extends Component {\n  renderEditButton(edit, expense, ask) {\n    return (\n      <button\n        className=\"btn btn-warning\"\n        type=\"button\"\n        data-testid=\"edit-btn\"\n        onClick={ () => {\n          edit(expense, ask);\n        } }\n      >\n        Editar\n      </button>\n    );\n  }\n\n  renderDeleteButton(deleteExpense, expense, ask) {\n    return (\n      <button\n        className=\"btn btn-danger\"\n        type=\"button\"\n        data-testid=\"delete-btn\"\n        onClick={ () => {\n          deleteExpense(expense, ask);\n        } }\n      >\n        Excluir\n      </button>\n    );\n  }\n\n  render() {\n    const { expenses, deleteExpense, edit } = this.props;\n    return (\n      <table className=\"table table-dark table-striped table-hover\">\n        <thead>\n          <tr className=\"table-success\">\n            <th scope=\"col\">Descrição</th>\n            <th scope=\"col\">Tag</th>\n            <th scope=\"col\">Método de pagamento</th>\n            <th scope=\"col\">Valor</th>\n            <th scope=\"col\">Moeda</th>\n            <th scope=\"col\">Câmbio utilizado</th>\n            <th scope=\"col\">Valor convertido</th>\n            <th scope=\"col\">Moeda de conversão</th>\n            <th scope=\"col\">Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expenses.sort((a, b) => {\n            if (a.id > b.id) {\n              return 1;\n            }\n            if (a.id < b.id) {\n              return minusOne;\n            }\n            return 0;\n          }).map((expense) => {\n            const coinInfo = Object.values(expense.exchangeRates)\n              .find((object) => object.code === expense.currency);\n            return (\n              <tr key={ expense.description }>\n                <td data-testid=\"description-cell\">{expense.description}</td>\n                <td>{expense.tag}</td>\n                <td>{expense.method}</td>\n                <td>{Number(expense.value).toFixed(2)}</td>\n                <td>{coinInfo.name}</td>\n                <td>{Number(coinInfo.ask).toFixed(2)}</td>\n                <td>{Number(Number(expense.value) * Number(coinInfo.ask)).toFixed(2)}</td>\n                <td>Real</td>\n                <td>\n                  {this.renderEditButton(edit, expense, coinInfo.ask)}\n                  {this.renderDeleteButton(deleteExpense, expense, coinInfo.ask)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expense, ask) => dispatch(removeExpense(expense, ask)),\n  edit: (expense, ask) => dispatch(editExpense(expense, ask)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\nimport { fetchAPI } from '../redux/actions';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      currency: 'BRL',\n    };\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  render() {\n    const { currency } = this.state;\n    const { totalCost } = this.props;\n    const displayEmail = localStorage.getItem('email');\n    return (\n      <div className=\"wallet-container\">\n        <Header\n          email={ displayEmail }\n          totalCost={ Number(totalCost).toFixed(2) }\n          currency={ currency }\n        />\n        <WalletForm />\n        <Table />\n      </div>);\n  }\n}\n\nWallet.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n  totalCost: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  totalCost: state.wallet.totalCost,\n});\n\nconst mapDispatchToProps = (dispatch) => ({ getCurrencies: () => dispatch(fetchAPI()) });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <Switch>\n            <Route path=\"/\" exact component={ Login } />\n            <Route path=\"/carteira\" component={ Wallet } />\n          </Switch>\n        </HashRouter>\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'SAVE_EMAIL':\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","const INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  expenseIndex: 0,\n  editor: false,\n  totalCost: 0,\n  exchangeRates: {},\n  currentExpense: {\n    id: -1,\n    value: '',\n    description: '',\n    currency: '',\n    method: '',\n    tag: '',\n    exchangeRates: {},\n  },\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'GET_CURRENCIES':\n    return {\n      ...state,\n      currencies: Object.keys(action.payload)\n        .filter((currency) => currency !== 'USDT'),\n      currenciesInfo: Object.values(action.payload),\n      exchangeRates: action.payload,\n    };\n  case 'SAVE_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expense],\n      expenseIndex: state.expenseIndex + 1,\n      totalCost: state.totalCost + Number(action.expense.value)\n      * Number(state.currenciesInfo\n        .find((cur) => cur.code === action.expense.currency).ask),\n    };\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      totalCost: state.totalCost - action.expense.value * action.ask,\n      expenses: state.expenses\n        .filter((exp) => exp !== action.expense),\n      expenseIndex: state.expenseIndex - 1,\n    };\n  case 'SET_EDIT_EXPENSE':\n    return {\n      ...state,\n      editor: true,\n      currentExpense: action.expense,\n      expenses: state.expenses.filter((exp) => exp !== action.expense),\n      totalCost: state.totalCost - action.expense.value * action.ask,\n    };\n  case 'FINISH_EDIT':\n    return {\n      ...state,\n      editor: false,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}